(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{613:function(t,s,n){"use strict";n.r(s);var a=n(8),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_4-median-of-two-sorted-arrays"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-median-of-two-sorted-arrays"}},[t._v("#")]),t._v(" "),n("a",{attrs:{href:"https://leetcode.com/problems/median-of-two-sorted-arrays/submissions/",target:"_blank",rel:"noopener noreferrer"}},[t._v("4. Median of Two Sorted Arrays"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"description"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),n("p",[t._v("Difficulty: "),n("strong",[t._v("Hard")])]),t._v(" "),n("p",[t._v("Related Topics: "),n("a",{attrs:{href:"https://leetcode.com/tag/array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array"),n("OutboundLink")],1),t._v(", "),n("a",{attrs:{href:"https://leetcode.com/tag/binary-search/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Binary Search"),n("OutboundLink")],1),t._v(", "),n("a",{attrs:{href:"https://leetcode.com/tag/divide-and-conquer/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Divide and Conquer"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("Given two sorted arrays "),n("code",[t._v("nums1")]),t._v(" and "),n("code",[t._v("nums2")]),t._v(" of size "),n("code",[t._v("m")]),t._v(" and "),n("code",[t._v("n")]),t._v(" respectively, return "),n("strong",[t._v("the median")]),t._v(" of the two sorted arrays.")]),t._v(" "),n("p",[t._v("The overall run time complexity should be "),n("code",[t._v("O(log (m+n))")]),t._v(".")]),t._v(" "),n("p",[n("strong",[t._v("Example 1:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Input: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n")])])]),n("p",[n("strong",[t._v("Example 2:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Input: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n")])])]),n("p",[n("strong",[t._v("Constraints:")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("nums1.length == m")])]),t._v(" "),n("li",[n("code",[t._v("nums2.length == n")])]),t._v(" "),n("li",[n("code",[t._v("0 <= m <= 1000")])]),t._v(" "),n("li",[n("code",[t._v("0 <= n <= 1000")])]),t._v(" "),n("li",[n("code",[t._v("1 <= m + n <= 2000")])]),t._v(" "),n("li",[t._v("-10"),n("sup",[t._v("6")]),t._v(" <= nums1[i], nums2[i] <= 10"),n("sup",[t._v("6")])])]),t._v(" "),n("h2",{attrs:{id:"solution"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#solution"}},[t._v("#")]),t._v(" Solution")]),t._v(" "),n("p",[t._v("Language: "),n("strong",[t._v("JavaScript")])]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n 当两个有序数组的长度之和为奇数的时候，中位数只有1个，将它返回；\n 当两个有序数组的长度之和为偶数的时候，中位数有2个，返回合并、排序以后位于中间的两个数的平均数。\n \n 方法一：暴力求解\n 先合并两个有序数组\n 然后排序找到中位数\n 没有使用数组有序这一条件\n \n 方法二：合并两个有序数组\n 借鉴归并排序的关键步骤【合并两个有序数组】（参考【力扣88题】），将时间复杂度降到O(m+n)\n 后面的部分和【暴力解法】一样\n 事实上，也可以不用合并完，就能得到答案。\n \n 方法三：二分查找\n 中位数：在只有一个有序数组的时候，中位数把数组分割成两个部分。\n 根据定义，分数组长度为奇数和偶数的讨论。\n \n 数组长度为偶数时，中位数有两个，其中一个是左边数组的最大值，另一个是右边数组的最小值。\n 数组长度为奇数时，中位数有1个，我们不妨把中位数分到左边数组。\n \n 中位数：在有两个有序数组的时候，仍然可以把两个数组分割成两个部分。\n 我们使用一条分割线把两个数组分别分割成两部分。\n 1.红线左边和右边的元素个数相等，或者左边元素的个数比右边元素的个数多1个；\n 2.红线左边的所有元素的数值<=红线右边的所有元素的数值；\n 那么中位数就一定只与红线两侧的元素有关，确定这条红线的位置使用二分查找。\n \n 分割线左边5个元素，分割线右边4个元素\n 当两个数组的元素个数之和为奇数的时候，有l[size]=r[size]+1\n 分割线左边元素的最大值就是数组的中位数\n \n 分割线左边5个元素，分割线右边5个元素\n 当两个数组的元素个数之和为偶数的时候，有l[size]=r[size]\n 分割线左边的元素的最大值就是其中的一个中位数\n 分割线右边的元素的最小值就是另外一个中位数\n \n 又由于这两个数组都是有序的数组，分割线左边的这两个元素的较大值，就是分割线左边的所有元素的最大值，它是其中一个中位数；分割线右边的这两个元素的较小值，就是分割线右边的所有元素的最小值，它是另外一个中位数。\n \n 假设数组1的长度为m，假设数组2的长度为n\n 当m+n为偶数的时候，l[size]=(m+n)/2=(m+n+1)/2\n 当m+n为奇数的时候，由于我们之前假设中位数被分到左边，l[size]=(m+n+1)/2;\n 因此，可以把以上两种写法合并，l[size]=(m+n+1)/2\n 得到这个结论的好处是，不用分奇数讨论，只需要确定其中一个数组的分割线位置，另一个数组的分割线位置可以通过公式计算出来。\n 此时满足的中位数分割线的第1个条件。\n \n 接下来我们看中位数要保持的第2个条件：红线左边的所有元素数值<=红线右边的所有元素数值。\n 由于两个数组都是有序数组，在同一个数组内，分割线一定满足左边的所有元素小于右边的所有元素。\n 在不同的数组之间，应该保证交叉小于等于关系成立。\n \n 第一个数组在分割线左边的最大值要小于等于第二个数组在分割线右边的最小值，并且第二个数组在分割线左边的最大值也要小于等于第一个数组在分割线右边的最小值，这样的分割线才是我们需要的。\n 那么，只要不符合交叉小于等于关系，我们就需要适当调整分割线的位置。\n \n 分情况：\n \n 中位数分割线右边的数太小\n 调整方案：将中位数分割线在数组1的位置右移\n 说明：第二个数组的分割线左边的最大值 大于 第一个数组在分割线右边的最小值\n \n 中位数分割线左边的数太大\n 调整方案：将中位数分割线在数组1的位置左移\n 说明：第一个数组的分割线左边的最大值 大于 第二个数组的分割线右边的最小值\n \n m=2,n=9,左6右5               m=3,n=9,左6右6\n 由于我们需要通过访问“中间数分割线”左右两边的元素，因此应该在较短的数组上确定“中间数分割线”的位置。\n \n 当两个数组长度相等的时候\n \n 定义分割线：\n 分割线在第1个数组右边的第1个元素的下标i=分割线在第1个数组左边的元素个数\n 分割线在第2个数组右边的第1个元素的下标j=分割线在第2个数组左边的元素个数\n \n totalLeft = i+j = (m+n+1)/2\n 在nums1的区间[0, m]里查找恰当的分割线\n 使得nums1[i-1] <= nums2[j] && nums2[j-1] <= num1[i]\n left = 0, right = m;\n i = left + (right-left+1)/2;\n j = totalLeft - i\n \n 下一轮搜索的区间[left, i-1]\n 下一轮搜索的区间[i, right]\n nums[i-1]>nums2[j] ? right = i-1 : left = i\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("findMedianSortedArrays")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("findMedianSortedArrays")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("left"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" min"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" min "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" m "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" max "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" min "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" max "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        \n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" leftMax "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" leftMax "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("leftMax "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        \n        "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);